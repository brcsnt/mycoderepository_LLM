
import streamlit as st
import logging
from langchain.chat_models import ChatOpenAI
from langchain.chains import RetrievalQA
from langchain.memory import ConversationBufferMemory
from langchain.embeddings import OpenAIEmbeddings
from langchain.vectorstores import Chroma
from langchain.docstore.document import Document
import os
import re

# 1️⃣ Logger Ayarla
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# 2️⃣ API Anahtarı Tanımla
os.environ["OPENAI_API_KEY"] = "your_api_key_here"

# 3️⃣ Örnek Kampanya Verileri
campaigns = [
    {"code": "KAMP001", "title": "Migros İndirim Kampanyası", "content": "Migros marketlerinde %20 indirim! 1-10 Şubat arasında geçerlidir.", "start_date": "01-02-2024", "end_date": "10-02-2024"},
    {"code": "KAMP002", "title": "Beyaz Eşya Kampanyası", "content": "Beyaz eşyalar 15 Mart'a kadar özel fiyatlarla!", "start_date": "01-03-2024", "end_date": "15-03-2024"},
    {"code": "KAMP003", "title": "Giyim Sezon Sonu İndirimi", "content": "Tüm giyim ürünlerinde %30 indirim!", "start_date": "01-04-2024", "end_date": "30-04-2024"}
   
]

# 4️⃣ OpenAI Embeddings kullanarak ChromaDB oluştur ve doldur
embeddings = OpenAIEmbeddings()
vector_store = Chroma(embedding_function=embeddings)

# Kampanya verilerini ChromaDB'ye ekleyelim
docs = [Document(page_content=f"{c['title']}: {c['content']} (Geçerlilik: {c['start_date']} - {c['end_date']})", metadata={"code": c["code"]}) for c in campaigns]
vector_store.add_documents(docs)
retriever = vector_store.as_retriever(search_kwargs={"k": 3})

# 5️⃣ LLM Modeli Tanımla ve Sistem Prompt Ekle
system_prompt = "Sen bir reklam kampanya asistanısın. Kullanıcıya kampanyalar hakkında bilgi ver, ama sadece kampanya metinlerinden referans al."
llm = ChatOpenAI(model_name="gpt-4", temperature=0, system_prompt=system_prompt)
qa_chain = RetrievalQA.from_chain_type(llm=llm, retriever=retriever)

# 6️⃣ Sohbet Hafızasını (Memory) Tanımla
memory = ConversationBufferMemory(memory_key="chat_history", return_messages=True)
previous_retrieved_campaigns = {}
follow_up_count = 0
max_follow_up = 5  # Kullanıcının aynı kampanya içinde sorabileceği maksimum takip sorusu

# 7️⃣ Kampanya Kodunu Çıkart ve Doğrudan Bilgi Getir
def extract_campaign_code(user_input):
    try:
        match = re.search(r"KAMP\d{3}", user_input)
        return match.group(0) if match else None
    except Exception as e:
        logger.error(f"Kampanya kodu çıkarma hatası: {e}")
        return None

# 8️⃣ Yeni Kampanyaya Geçişi Algıla
def detect_new_campaign(user_input):
    global previous_retrieved_campaigns, follow_up_count
    
    try:
        logger.info(f"Yeni kampanya tespiti için giriş alındı: {user_input}")
        
        campaign_code = extract_campaign_code(user_input)
        if campaign_code:
            docs = retriever.get_relevant_documents(campaign_code)
            if docs:
                previous_retrieved_campaigns[campaign_code] = docs[0]
                follow_up_count = 0  # Yeni kampanya başladığında follow-up sayacını sıfırla
                logger.info(f"Belirtilen kampanya kodu bulundu: {campaign_code}, İçerik: {docs[0].page_content}")
                return docs[0].page_content
        
        # VectorStore kullanarak en alakalı top_n kampanyayı bul
        similar_docs = retriever.get_relevant_documents(user_input)
        if similar_docs:
            previous_retrieved_campaigns = {f"KAMP{i+1:03}": doc for i, doc in enumerate(similar_docs)}
            follow_up_count = 0  # Yeni kampanya bulunduğunda follow-up sıfırlanır
            result = "\n".join([f"{key} - {doc.page_content.split(' ', 5)[0]}..." for key, doc in previous_retrieved_campaigns.items()])
            return f"En alakalı kampanyalar:\n{result}"
        
        return "Uygun kampanya bulunamadı."
    except Exception as e:
        logger.error(f"Yeni kampanya tespitinde hata: {e}")
        return "Bir hata oluştu, lütfen tekrar deneyin."

# 9️⃣ Kullanıcıdan Giriş Al ve Yanıt Döndür
def chat_with_bot(user_input):
    global previous_retrieved_campaigns, follow_up_count
    
    try:
        logger.info(f"Kullanıcı girişi: {user_input}")
        
        if follow_up_count >= max_follow_up:
            return "⚠ Maksimum takip soru sınırına ulaşıldı. Yeni bir kampanya hakkında soru sorabilirsiniz."
        
        chat_history = memory.load_memory_variables({})["chat_history"]
        campaign_info = detect_new_campaign(user_input)
        if campaign_info:
            return campaign_info
        
        match = re.search(r"(KAMP\d{3}) hakkında (.+)\??", user_input)
        if match:
            campaign_code = match.group(1)
            if campaign_code in previous_retrieved_campaigns:
                selected_campaign = previous_retrieved_campaigns[campaign_code]
                follow_up_count += 1  # Takip sorusu sayısını artır
                logger.info(f"Seçilen kampanya: {selected_campaign}")
                return qa_chain.run(f"{chat_history}\nKullanıcı: {user_input}\nBu kampanya hakkında: {selected_campaign.page_content}")
            return "⚠ Geçersiz kampanya kodu. Lütfen geçerli bir kampanya girin."
        
        follow_up_count += 1  # Genel sorular için de takip sorusu sayısını artır
        response = qa_chain.run(f"{chat_history}\nKullanıcı: {user_input}")
        memory.save_context({"input": user_input}, {"output": response})
        logger.info(f"LLM Yanıtı: {response}")
        return response
    except Exception as e:
        logger.error(f"Chat işleminde hata: {e}")
        return "Bir hata oluştu, lütfen tekrar deneyin."

# 🔟 Streamlit Arayüzü
st.title("📢 Reklam Kampanya Chatbotu")
st.write("Sorularınızı sorun, kampanyalar hakkında bilgi alın!")

user_input = st.text_input("Mesajınızı girin:")
if st.button("Gönder"):
    if user_input:
        response = chat_with_bot(user_input)
        st.write(response)



---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------





import streamlit as st
import logging
from langchain.chat_models import ChatOpenAI
from langchain.chains import RetrievalQA
from langchain.memory import ConversationBufferMemory
from langchain.embeddings import OpenAIEmbeddings
from langchain.vectorstores import Chroma
from langchain.docstore.document import Document
import os
import re

# 1️⃣ Logger Ayarla - Hata ve işlem kayıtlarını tutmak için kullanılır
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# 2️⃣ OpenAI API Anahtarı Tanımla - OpenAI LLM modelini kullanabilmek için gerekli
os.environ["OPENAI_API_KEY"] = "your_api_key_here"

# 3️⃣ Örnek Kampanya Verileri - Kullanıcıya sunulacak kampanyalar burada tanımlanır
campaigns = [
    {"code": "KAMP001", "title": "Migros İndirim Kampanyası", "content": "Migros marketlerinde %20 indirim! 1-10 Şubat arasında geçerlidir.", "start_date": "01-02-2024", "end_date": "10-02-2024"},
    {"code": "KAMP002", "title": "Beyaz Eşya Kampanyası", "content": "Beyaz eşyalar 15 Mart'a kadar özel fiyatlarla!", "start_date": "01-03-2024", "end_date": "15-03-2024"},
    {"code": "KAMP003", "title": "Giyim Sezon Sonu İndirimi", "content": "Tüm giyim ürünlerinde %30 indirim!", "start_date": "01-04-2024", "end_date": "30-04-2024"}
]

# 4️⃣ OpenAI Embeddings kullanarak ChromaDB oluştur ve doldur - Kampanyalar vektör olarak saklanır
embeddings = OpenAIEmbeddings()
vector_store = Chroma(embedding_function=embeddings)

# Kampanya verilerini ChromaDB'ye ekleyelim
docs = [Document(page_content=f"{c['title']}: {c['content']} (Geçerlilik: {c['start_date']} - {c['end_date']})", metadata={"code": c["code"]}) for c in campaigns]
vector_store.add_documents(docs)
retriever = vector_store.as_retriever(search_kwargs={"k": 3})

# 5️⃣ LLM Modeli Tanımla ve Sistem Prompt Ekle - Modelin nasıl davranacağını belirler
system_prompt = "Sen bir reklam kampanya asistanısın. Kullanıcıya kampanyalar hakkında bilgi ver, ama sadece kampanya metinlerinden referans al."
follow_up_prompt = "Bu bir takip sorusudur. Önceki konuşmaları dikkate alarak, sadece kampanya metinlerine dayanarak kesin ve kısa bir yanıt ver."

llm = ChatOpenAI(model_name="gpt-4", temperature=0, system_prompt=system_prompt)
qa_chain = RetrievalQA.from_chain_type(llm=llm, retriever=retriever)

# 6️⃣ Sohbet Hafızasını (Memory) Tanımla - Kullanıcının konuşmalarını saklar
memory = ConversationBufferMemory(memory_key="chat_history", return_messages=True)
previous_retrieved_campaigns = {}  # Önceki getirilen kampanyaları saklar
follow_up_count = 0  # Kullanıcının kaç tane takip sorusu sorduğunu takip eder
max_follow_up = 5  # Kullanıcının aynı kampanya içinde sorabileceği maksimum takip sorusu

# 9️⃣ Kullanıcıdan Giriş Al ve Yanıt Döndür - Kullanıcının mesajını alır ve uygun cevabı döndürür
def chat_with_bot(user_input):
    global previous_retrieved_campaigns, follow_up_count
    
    try:
        logger.info(f"Kullanıcı girişi: {user_input}")
        
        if follow_up_count >= max_follow_up:
            return "⚠ Maksimum takip soru sınırına ulaşıldı. Yeni bir kampanya hakkında soru sorabilirsiniz."
        
        chat_history = memory.load_memory_variables({})["chat_history"]
        campaign_info = detect_new_campaign(user_input)
        if campaign_info:
            return campaign_info
        
        match = re.search(r"(KAMP\d{3}) hakkında (.+)\??", user_input)
        if match:
            campaign_code = match.group(1)
            if campaign_code in previous_retrieved_campaigns:
                selected_campaign = previous_retrieved_campaigns[campaign_code]
                follow_up_count += 1
                logger.info(f"Seçilen kampanya: {selected_campaign}")
                return qa_chain.run(f"{follow_up_prompt}\n{chat_history}\nKullanıcı: {user_input}\nBu kampanya hakkında: {selected_campaign.page_content}")
        
        follow_up_count += 1
        if follow_up_count > 1:
            response = qa_chain.run(f"{follow_up_prompt}\n{chat_history}\nKullanıcı: {user_input}")
        else:
            response = qa_chain.run(f"{system_prompt}\n{chat_history}\nKullanıcı: {user_input}")
        
        memory.save_context({"input": user_input}, {"output": response})
        logger.info(f"LLM Yanıtı: {response}")
        return response
    except Exception as e:
        logger.error(f"Chat işleminde hata: {e}")
        return "Bir hata oluştu, lütfen tekrar deneyin."

# 🔟 Streamlit Arayüzü - Kullanıcıdan giriş alıp chatbot ile iletişime geçmesini sağlar
st.title("📢 Reklam Kampanya Chatbotu")
st.write("Sorularınızı sorun, kampanyalar hakkında bilgi alın!")

user_input = st.text_input("Mesajınızı girin:")
if st.button("Gönder"):
    if user_input:
        response = chat_with_bot(user_input)
        st.write(response)



------------------------------------------------------------------------------------------------------------------------------------------------



"""


Evet, kodun son hali yukarıdaki diyalog akışına uygun şekilde cevap verebilecek şekilde tasarlanmıştır. Örneğin:

Kullanıcı: "KAMP001 kampanyası nedir ?"

Sorguda açıkça "KAMP001" yer aldığından, sistem doğrudan bu kampanyayı tespit eder, global kampanya listesi ve takip sayacı sıfırlanır (konuşma geçmişi temizlenir) ve KAMP001’in içerik bilgisi ile LLM’ye sorgu gönderilerek yanıt üretilir.
Kullanıcı: "Bana Migros kampanyasının detaylarını söyle."

Sorguda açık bir kampanya kodu olmadığı için, sistem vector store üzerinden TOP_N (3) kriterine göre ilgili kampanyaları arar. Eğer Migros ile ilgili kampanyalar varsa, bu kampanyaların kod ve başlık bilgileri liste halinde (örneğin, “1. KAMP001: Migros İndirim Kampanyası” gibi) sunulur.
Kullanıcı: "2.gelen kampanyanın içeriği nedir?"

Bu takip (follow-up) sorgusunda, sistem önceki listelenen kampanyalar ve konuşma geçmişini LLM’ye göndererek kullanıcının hangi kampanyaya atıfta bulunduğunu belirlemesini ister. LLM’nin tespit ettiği kampanyanın içerik bilgisi, kullanıcının sorusu ile birlikte LLM’ye gönderilir ve LLM’nin cevabı ekrana basılır.
Kullanıcı: "Peki 3.sıradaki kampanyanın detayı neydi yazar mısın?"

Aynı şekilde, LLM önceki listeden (örneğin, 3. sıradaki kampanya) hangi kampanyanın kastedildiğini belirler, ilgili kampanyanın içerik bilgisi ve kullanıcı sorusu ile LLM’den nihai yanıt alınır.
Kullanıcı: "Peki sonuncu yazan kampanyanın detayı?"

LLM, "sonuncu" ifadesini de göz önünde bulundurarak önceki listeden en son elemanı tespit eder ve bu kampanyanın detayları, kullanıcının sorusu ile birlikte LLM’ye gönderilerek yanıt üretilir.
Kullanıcı: "Beyaz eşya kampanyasının detayları neydi peki"

Eğer LLM, bu sorgunun önceki listelenen kampanyalarla ilişkili olmadığını belirlerse, sistem global durumu (last_retrieved_campaigns ve konuşma geçmişini) temizler ve yeni kampanya sorgusu olarak "Beyaz Eşya Kampanyası"nı vector store’dan arar. Böylece yeni kampanya sorgusu üzerinden ilgili kampanyanın detayları LLM’den alınır.
Kullanıcı: "KAMP003 kampanyasının detayları nedir ?"

Sorguda açıkça "KAMP003" yer aldığından, sistem doğrudan KAMP003’ü tespit eder, global durum sıfırlanır ve KAMP003’ün içerik bilgisi ile LLM’ye sorgu gönderilerek yanıt alınır.
Ayrıca, takip sorgularında maksimum takip sayısı (örneğin MAX_FOLLOW_UP = 5) uygulanmakta; eğer kullanıcı 5 takip sorgusuna ulaşırsa, sistem otomatik olarak global durumu temizleyip yeni kampanya sorgusu yapılmasını isteyecektir.

Bu yapı sayesinde, kullanıcı hiçbir ek numeric veya sıralama girdisi vermeden, tamamen doğal diyalog akışı içerisinde doğru kampanyanın tespit edilip, ilgili kampanyanın içerik bilgisiyle LLM tarafından üretilen yanıt ekrana basılacaktır.


"""


import streamlit as st
import logging
import os
import re
from langchain.chat_models import ChatOpenAI
from langchain.chains import RetrievalQA
from langchain.memory import ConversationBufferMemory
from langchain.embeddings import OpenAIEmbeddings
from langchain.vectorstores import Chroma
from langchain.docstore.document import Document

# 1️⃣ Logger Ayarla
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# 2️⃣ OpenAI API Anahtarı Tanımla
os.environ["OPENAI_API_KEY"] = "your_api_key_here"  # API anahtarınızı buraya girin

# 3️⃣ Örnek Kampanya Verileri
campaigns = [
    {"code": "KAMP001", "title": "Migros İndirim Kampanyası", "content": "Migros marketlerinde %20 indirim! 1-10 Şubat arasında geçerlidir.", "start_date": "01-02-2024", "end_date": "10-02-2024"},
    {"code": "KAMP002", "title": "Beyaz Eşya Kampanyası", "content": "Beyaz eşyalar 15 Mart'a kadar özel fiyatlarla!", "start_date": "01-03-2024", "end_date": "15-03-2024"},
    {"code": "KAMP003", "title": "Giyim Sezon Sonu İndirimi", "content": "Tüm giyim ürünlerinde %30 indirim!", "start_date": "01-04-2024", "end_date": "30-04-2024"}
]

# Parametrik olarak top_n değeri (şu anda 3 olarak ayarlandı)
TOP_N = 3

# Takip sorguları için maksimum sayıyı belirleyelim (örneğin, 5)
MAX_FOLLOW_UP = 5

# 4️⃣ OpenAI Embeddings kullanarak ChromaDB oluştur ve doldur
embeddings = OpenAIEmbeddings()
vector_store = Chroma(embedding_function=embeddings)
docs = [
    Document(
        page_content=f"{c['title']}: {c['content']} (Geçerlilik: {c['start_date']} - {c['end_date']})",
        metadata={"code": c["code"]}
    )
    for c in campaigns
]
vector_store.add_documents(docs)
# TOP_N kriteri kullanılarak en iyi sonuçlar alınır.
retriever = vector_store.as_retriever(search_kwargs={"k": TOP_N})

# 5️⃣ LLM Modeli ve Prompt Ayarları
system_prompt = "Sen bir reklam kampanya asistanısın. Kullanıcıya kampanyalar hakkında bilgi ver, yanıtlarını sadece kampanya metinlerine dayandır."
follow_up_prompt = (
    "Bu bir takip (follow-up) sorusudur. Aşağıdaki konuşma geçmişini ve listelenen kampanyaları inceleyerek, "
    "kullanıcının hangi kampanya hakkında detay istediğini belirle ve sadece o kampanyanın detaylarını ver."
)

llm = ChatOpenAI(model_name="gpt-4", temperature=0, system_prompt=system_prompt)
qa_chain = RetrievalQA.from_chain_type(llm=llm, retriever=retriever)

# 6️⃣ Konuşma Hafızası ve Global Durum Değişkenleri
memory = ConversationBufferMemory(memory_key="chat_history", return_messages=True)
last_retrieved_campaigns = []   # Son sorgudan dönen kampanyaların listesini saklar
follow_up_count = 0              # Takip sorguları için sayacı tutar

# 7️⃣ Yeni Kampanya Sorgularını Doğal Dil ile Tespit Eden Fonksiyon
def detect_new_campaign(user_input: str):
    """
    Eğer sorguda doğrudan kampanya kodu geçmiyorsa,
    vector store üzerinden ilgili kampanyaları getirir.
    
    - Eğer tek bir kampanya bulunursa, kampanyanın content’i ve kullanıcının sorusu ile LLM'den yanıt alınır.
    - Eğer birden fazla kampanya bulunursa, TOP_N kadar sonuç liste halinde sunulur.
    """
    global last_retrieved_campaigns
    if re.search(r"KAMP\d{3}", user_input, re.IGNORECASE):
        return None  # Sorguda açık kampanya kodu varsa bu fonksiyon devreye girmez.

    retrieved_docs = retriever.get_relevant_documents(user_input)
    if not retrieved_docs:
        return "Üzgünüm, sorgunuza uygun kampanya bulunamadı."
    
    last_retrieved_campaigns = retrieved_docs

    if len(retrieved_docs) == 1:
        doc = retrieved_docs[0]
        response = qa_chain.run(
            f"{system_prompt}\nKullanıcı: {user_input}\nBu kampanya hakkında: {doc.page_content}"
        )
        return response
    else:
        # Birden fazla kampanya bulunduğunda, TOP_N kadar sonuç liste halinde sunulur.
        response_lines = ["İlgili kampanyalar:"]
        for i, doc in enumerate(retrieved_docs[:TOP_N], start=1):
            title = doc.page_content.split(":")[0].strip()
            code = doc.metadata.get("code", "Bilinmiyor")
            response_lines.append(f"{i}. {code}: {title}")
        return "\n".join(response_lines)

# 8️⃣ Kullanıcı Girdilerini İşleyen Fonksiyon
def chat_with_bot(user_input: str):
    global last_retrieved_campaigns, follow_up_count
    try:
        logger.info(f"Kullanıcı girişi: {user_input}")
        chat_history = memory.load_memory_variables({})["chat_history"]

        # (A) Eğer sorguda açıkça kampanya kodu (örn. "KAMP001") varsa:
        code_match = re.search(r"(KAMP\d{3})", user_input, re.IGNORECASE)
        if code_match:
            campaign_code = code_match.group(1).upper()
            selected_doc = next((doc for doc in docs if doc.metadata.get("code", "").upper() == campaign_code), None)
            if selected_doc:
                # Yeni kampanya sorgusu olduğundan, global liste ve (opsiyonel) geçmiş temizlenir.
                last_retrieved_campaigns = [selected_doc]
                follow_up_count = 0
                memory.clear()  # Konuşma geçmişini temizle
                # Kampanyanın content’i ve kullanıcının sorusu ile LLM'den yanıt alınır.
                response = qa_chain.run(
                    f"{system_prompt}\nKullanıcı: {user_input}\nBu kampanya hakkında: {selected_doc.page_content}"
                )
                memory.save_context({"input": user_input}, {"output": response})
                return response
            else:
                return "Belirtilen kampanya bulunamadı."

        # (B) Eğer daha önceki sorgudan dönen kampanya listesi boşsa, yeni sorgu olarak ele al:
        if not last_retrieved_campaigns:
            new_campaign_response = detect_new_campaign(user_input)
            memory.save_context({"input": user_input}, {"output": new_campaign_response})
            return new_campaign_response

        # (C) Gelen sorgu bir takip (follow-up) sorgusuyse:
        # Eğer takip sorgularının sayısı maksimum değeri aştıysa:
        if follow_up_count >= MAX_FOLLOW_UP:
            # Maksimum takip sayısına ulaşıldığında, kullanıcıya yeni kampanya sorgusu yapması istenir.
            last_retrieved_campaigns = []
            memory.clear()  # Konuşma geçmişini temizle
            follow_up_count = 0
            return "Maksimum takip soru sınırına ulaşıldı. Lütfen yeni kampanya sorgusu yapınız."

        # Takip sorgusunda, LLM’den önceki listelenen kampanyalar ve konuşma geçmişine dayanarak,
        # kullanıcının hangi kampanyaya atıfta bulunduğunu belirlemesi istenir.
        campaigns_context = "\n".join(
            f"{doc.metadata.get('code','Bilinmiyor')}: {doc.page_content}"
            for doc in last_retrieved_campaigns
        )
        determination_prompt = (
            f"Aşağıdaki listelenen kampanyalar içerisinden, kullanıcının aşağıdaki sorgusuyla en çok hangi kampanyaya atıfta bulunduğunu belirle. "
            f"Eğer sorgu, listelenen kampanyalarla ilgili değilse, sadece 'yeni kampanya' yaz.\n\n"
            f"Listelenen Kampanyalar:\n{campaigns_context}\n\n"
            f"Kullanıcının Sorgusu: {user_input}\n\n"
            f"Yanıt (sadece ilgili kampanya kodunu ya da 'yeni kampanya' ifadesini ver): "
        )
        determination = llm.run(determination_prompt).strip().lower()
        logger.info(f"Determination: {determination}")

        # Eğer LLM yanıtında "yeni kampanya" ifadesi geçiyorsa:
        if "yeni kampanya" in determination:
            last_retrieved_campaigns = []
            memory.clear()  # Konuşma geçmişini temizle
            follow_up_count = 0
            new_campaign_response = detect_new_campaign(user_input)
            memory.save_context({"input": user_input}, {"output": new_campaign_response})
            return new_campaign_response
        else:
            # LLM yanıtından tespit edilen kampanya kodunu kullanarak ilgili kampanyayı seçelim.
            campaign_code_match = re.search(r"(KAMP\d{3})", determination, re.IGNORECASE)
            if campaign_code_match:
                campaign_code = campaign_code_match.group(1).upper()
                selected_doc = next((doc for doc in last_retrieved_campaigns if doc.metadata.get("code", "").upper() == campaign_code), None)
                if not selected_doc:
                    return "Listede belirtilen kampanya bulunamadı."
            else:
                return "Lütfen hangi kampanyadan bahsettiğinizi netleştiriniz."
            
            follow_up_count += 1
            # Kampanyanın content’i ve kullanıcının sorusu ile LLM’den yardım alınır, son yanıt ekrana basılır.
            response = qa_chain.run(
                f"{follow_up_prompt}\nKullanıcı: {user_input}\nBu kampanya hakkında: {selected_doc.page_content}\nKonuşma Geçmişi:\n{chat_history}"
            )
            memory.save_context({"input": user_input}, {"output": response})
            return response

    except Exception as e:
        logger.error(f"Chat işleminde hata: {e}")
        return "Bir hata oluştu, lütfen tekrar deneyin."

# 9️⃣ Streamlit Arayüzü
st.title("📢 Reklam Kampanya Chatbotu")
st.write("Sorularınızı sorun, kampanyalar hakkında bilgi alın!")

user_input = st.text_input("Mesajınızı girin:")
if st.button("Gönder"):
    if user_input:
        response = chat_with_bot(user_input)
        st.write(response)





----------------------------------------------------------------------------------------------------

# LOG LU YAPI



import streamlit as st
import logging
import os
import re
import pandas as pd
from datetime import datetime
from langchain.chat_models import ChatOpenAI
from langchain.chains import RetrievalQA
from langchain.memory import ConversationBufferMemory
from langchain.embeddings import OpenAIEmbeddings
from langchain.vectorstores import Chroma
from langchain.docstore.document import Document

# 1️⃣ Logger Ayarla
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# 2️⃣ OpenAI API Anahtarı Tanımla
os.environ["OPENAI_API_KEY"] = "your_api_key_here"  # API anahtarınızı buraya girin

# 3️⃣ Örnek Kampanya Verileri
campaigns = [
    {"code": "KAMP001", "title": "Migros İndirim Kampanyası", "content": "Migros marketlerinde %20 indirim! 1-10 Şubat arasında geçerlidir.", "start_date": "01-02-2024", "end_date": "10-02-2024"},
    {"code": "KAMP002", "title": "Beyaz Eşya Kampanyası", "content": "Beyaz eşyalar 15 Mart'a kadar özel fiyatlarla!", "start_date": "01-03-2024", "end_date": "15-03-2024"},
    {"code": "KAMP003", "title": "Giyim Sezon Sonu İndirimi", "content": "Tüm giyim ürünlerinde %30 indirim!", "start_date": "01-04-2024", "end_date": "30-04-2024"}
]

# Parametrik olarak top_n değeri (şu anda 3 olarak ayarlandı)
TOP_N = 3

# Takip sorguları için maksimum sayı (örneğin 5)
MAX_FOLLOW_UP = 5

# 4️⃣ OpenAI Embeddings kullanarak ChromaDB oluştur ve doldur
embeddings = OpenAIEmbeddings()
vector_store = Chroma(embedding_function=embeddings)
docs = [
    Document(
        page_content=f"{c['title']}: {c['content']} (Geçerlilik: {c['start_date']} - {c['end_date']})",
        metadata={"code": c["code"]}
    )
    for c in campaigns
]
vector_store.add_documents(docs)
retriever = vector_store.as_retriever(search_kwargs={"k": TOP_N})

# 5️⃣ LLM Modeli ve Prompt Ayarları
system_prompt = "Sen bir reklam kampanya asistanısın. Kullanıcıya kampanyalar hakkında bilgi ver, yanıtlarını sadece kampanya metinlerine dayandır."
follow_up_prompt = (
    "Bu bir takip (follow-up) sorusudur. Aşağıdaki konuşma geçmişini ve listelenen kampanyaları inceleyerek, "
    "kullanıcının hangi kampanya hakkında detay istediğini belirle ve sadece o kampanyanın detaylarını ver."
)

llm = ChatOpenAI(model_name="gpt-4", temperature=0, system_prompt=system_prompt)
qa_chain = RetrievalQA.from_chain_type(llm=llm, retriever=retriever)

# 6️⃣ Konuşma Hafızası ve Global Durum Değişkenleri
memory = ConversationBufferMemory(memory_key="chat_history", return_messages=True)

# Global kampanya listesi ve takip sayısı
last_retrieved_campaigns = []   # Son sorgudan dönen kampanyaların listesini saklar
follow_up_count = 0              # Takip sorguları için sayaç

# Session yönetimi için: kampanya kodu ve session id bilgileri
if "current_campaign_code" not in st.session_state:
    st.session_state["current_campaign_code"] = None
if "session_id" not in st.session_state:
    st.session_state["session_id"] = 0
if "session_counter" not in st.session_state:
    st.session_state["session_counter"] = 0

# Excel loglarını tutmak için st.session_state kullanıyoruz
if "chat_logs" not in st.session_state:
    st.session_state["chat_logs"] = []

def log_conversation(user_input: str, bot_response: str, campaign_code: str):
    """Her etkileşimi st.session_state üzerinden kaydeder ve Excel dosyasına yazar."""
    log_entry = {
        "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        "session_id": st.session_state["session_id"],
        "campaign_code": campaign_code,
        "user_input": user_input,
        "bot_response": bot_response
    }
    st.session_state["chat_logs"].append(log_entry)
    # Pandas DataFrame'e çevirip Excel dosyasına yazalım (her mesaj sonrası güncelleme)
    df = pd.DataFrame(st.session_state["chat_logs"])
    df.to_excel("chat_logs.xlsx", index=False)

def update_session(campaign_code: str):
    """
    Yeni kampanya kodu geldiyse session id güncellenir, 
    aynı kampanya kodu devam ediyorsa aynı session id kullanılır.
    """
    if st.session_state["current_campaign_code"] is None:
        st.session_state["current_campaign_code"] = campaign_code
        st.session_state["session_counter"] = 1
        st.session_state["session_id"] = 1
    elif st.session_state["current_campaign_code"] != campaign_code:
        st.session_state["session_counter"] += 1
        st.session_state["current_campaign_code"] = campaign_code
        st.session_state["session_id"] = st.session_state["session_counter"]
    # Eğer kampanya kodu aynı ise, session_id değişmeden kalır.

# 7️⃣ Yeni Kampanya Sorgularını Doğal Dil ile Tespit Eden Fonksiyon
def detect_new_campaign(user_input: str):
    """
    Eğer sorguda doğrudan kampanya kodu geçmiyorsa,
    vector store üzerinden ilgili kampanyaları getirir.
    
    - Eğer tek bir kampanya bulunursa, kampanyanın content’i ve kullanıcının sorusu ile LLM'den yanıt alınır.
    - Eğer birden fazla kampanya bulunursa, TOP_N kadar sonuç liste halinde sunulur.
    """
    global last_retrieved_campaigns
    if re.search(r"KAMP\d{3}", user_input, re.IGNORECASE):
        return None  # Sorguda açık kampanya kodu varsa bu fonksiyon devreye girmez.

    retrieved_docs = retriever.get_relevant_documents(user_input)
    if not retrieved_docs:
        return "Üzgünüm, sorgunuza uygun kampanya bulunamadı."
    
    last_retrieved_campaigns = retrieved_docs

    # Eğer sadece 1 kampanya bulunduysa, session güncellemesi yapalım.
    if len(retrieved_docs) == 1:
        doc = retrieved_docs[0]
        campaign_code = doc.metadata.get("code", "").upper()
        update_session(campaign_code)
        response = qa_chain.run(
            f"{system_prompt}\nKullanıcı: {user_input}\nBu kampanya hakkında: {doc.page_content}"
        )
        return response
    else:
        # Birden fazla kampanya bulunursa, TOP_N kadar sonuç liste halinde sunulur.
        response_lines = ["İlgili kampanyalar:"]
        for i, doc in enumerate(retrieved_docs[:TOP_N], start=1):
            title = doc.page_content.split(":")[0].strip()
            code = doc.metadata.get("code", "Bilinmiyor")
            response_lines.append(f"{i}. {code}: {title}")
        return "\n".join(response_lines)

# 8️⃣ Kullanıcı Girdilerini İşleyen Fonksiyon
def chat_with_bot(user_input: str):
    global last_retrieved_campaigns, follow_up_count
    try:
        logger.info(f"Kullanıcı girişi: {user_input}")
        chat_history = memory.load_memory_variables({})["chat_history"]

        # (A) Sorguda açıkça kampanya kodu varsa:
        code_match = re.search(r"(KAMP\d{3})", user_input, re.IGNORECASE)
        if code_match:
            campaign_code = code_match.group(1).upper()
            update_session(campaign_code)
            selected_doc = next((doc for doc in docs if doc.metadata.get("code", "").upper() == campaign_code), None)
            if selected_doc:
                last_retrieved_campaigns = [selected_doc]
                follow_up_count = 0
                memory.clear()  # Konuşma geçmişini temizle
                # Kampanyanın content’i ve kullanıcının sorusu ile LLM’den yanıt alınır.
                response = qa_chain.run(
                    f"{system_prompt}\nKullanıcı: {user_input}\nBu kampanya hakkında: {selected_doc.page_content}"
                )
                log_conversation(user_input, response, campaign_code)
                memory.save_context({"input": user_input}, {"output": response})
                return response
            else:
                return "Belirtilen kampanya bulunamadı."

        # (B) Eğer önceki kampanya listesi boşsa, yeni sorgu olarak ele al:
        if not last_retrieved_campaigns:
            new_campaign_response = detect_new_campaign(user_input)
            # Eğer tek kampanya bulunduysa, session bilgileri detect_new_campaign içinde güncellenecektir.
            # Kampanya kodını, global listeden (varsa) alalım.
            campaign_code = last_retrieved_campaigns[0].metadata.get("code", "").upper() if last_retrieved_campaigns else ""
            log_conversation(user_input, new_campaign_response, campaign_code)
            memory.save_context({"input": user_input}, {"output": new_campaign_response})
            return new_campaign_response

        # (C) Gelen sorgu bir takip (follow-up) sorgusuysa:
        if follow_up_count >= MAX_FOLLOW_UP:
            last_retrieved_campaigns = []
            memory.clear()  # Konuşma geçmişini temizle
            follow_up_count = 0
            return "Maksimum takip soru sınırına ulaşıldı. Lütfen yeni kampanya sorgusu yapınız."

        # Takip sorgusunda, LLM’den önceki listelenen kampanyalar ve konuşma geçmişi üzerinden hangi kampanyaya atıfta bulunduğunu belirlemesi istenir.
        campaigns_context = "\n".join(
            f"{doc.metadata.get('code','Bilinmiyor')}: {doc.page_content}"
            for doc in last_retrieved_campaigns
        )
        determination_prompt = (
            f"Aşağıdaki listelenen kampanyalar içerisinden, kullanıcının aşağıdaki sorgusuyla en çok hangi kampanyaya atıfta bulunduğunu belirle. "
            f"Eğer sorgu, listelenen kampanyalarla ilgili değilse, sadece 'yeni kampanya' yaz.\n\n"
            f"Listelenen Kampanyalar:\n{campaigns_context}\n\n"
            f"Kullanıcının Sorgusu: {user_input}\n\n"
            f"Yanıt (sadece ilgili kampanya kodunu ya da 'yeni kampanya' ifadesini ver): "
        )
        determination = llm.run(determination_prompt).strip().lower()
        logger.info(f"Determination: {determination}")

        if "yeni kampanya" in determination:
            last_retrieved_campaigns = []
            memory.clear()  # Konuşma geçmişini temizle
            follow_up_count = 0
            new_campaign_response = detect_new_campaign(user_input)
            campaign_code = last_retrieved_campaigns[0].metadata.get("code", "").upper() if last_retrieved_campaigns else ""
            log_conversation(user_input, new_campaign_response, campaign_code)
            memory.save_context({"input": user_input}, {"output": new_campaign_response})
            return new_campaign_response
        else:
            campaign_code_match = re.search(r"(KAMP\d{3})", determination, re.IGNORECASE)
            if campaign_code_match:
                campaign_code = campaign_code_match.group(1).upper()
                selected_doc = next((doc for doc in last_retrieved_campaigns if doc.metadata.get("code", "").upper() == campaign_code), None)
                if not selected_doc:
                    return "Listede belirtilen kampanya bulunamadı."
                update_session(campaign_code)
            else:
                return "Lütfen hangi kampanyadan bahsettiğinizi netleştiriniz."
            
            follow_up_count += 1
            response = qa_chain.run(
                f"{follow_up_prompt}\nKullanıcı: {user_input}\nBu kampanya hakkında: {selected_doc.page_content}\nKonuşma Geçmişi:\n{chat_history}"
            )
            log_conversation(user_input, response, campaign_code)
            memory.save_context({"input": user_input}, {"output": response})
            return response

    except Exception as e:
        logger.error(f"Chat işleminde hata: {e}")
        return "Bir hata oluştu, lütfen tekrar deneyin."

# 9️⃣ Streamlit Arayüzü
st.title("📢 Reklam Kampanya Chatbotu")
st.write("Sorularınızı sorun, kampanyalar hakkında bilgi alın!")
st.markdown("---")

# Sohbet geçmişini göstermek için basit bir alan
if "conversation" not in st.session_state:
    st.session_state["conversation"] = []

user_input = st.text_input("Mesajınızı girin:")

if st.button("Gönder"):
    if user_input:
        bot_response = chat_with_bot(user_input)
        # Konuşma geçmişini güncelleyelim (sadece metin olarak)
        st.session_state["conversation"].append(("Kullanıcı", user_input))
        st.session_state["conversation"].append(("Bot", bot_response))
        # Sohbet geçmişini ekranda gösterelim
        for speaker, message in st.session_state["conversation"]:
            if speaker == "Kullanıcı":
                st.markdown(f"**Kullanıcı:** {message}")
            else:
                st.markdown(f"**Bot:** {message}")

